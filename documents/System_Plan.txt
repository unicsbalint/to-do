
###System plan###

1. Goal of the system:

The goal of the system is to help the people to remember their goals and tasks.
Nowadays there are many ways to help ourselves when it comes to task managing.
Most of these are hard-to-use, and that is the reason why we want our system to be simple yet useful.

----------------------------------------------------------------------------------------------------------------------------------------------------------
2. Project plan:

We are making web application using frontend and backend programming. The web applications design and structure
will be the task for the frontend developers. Backend developers will ensure that the website connects to the database
and the functions that uses database connection work.

Frontend developers:
	- HTML:
	- CSS:
	- JavaScript:

Backend developers:
	- PHP:

----------------------------------------------------------------------------------------------------------------------------------------------------------
3. Business use case model:

A model of our desired business use case can be found at the following url:
https://trello.com/c/7JcdEM9B/5-system-plan

----------------------------------------------------------------------------------------------------------------------------------------------------------
4. Requirements:

	- Functional requirements:
		a, The user can log in, log out and delete his account
		b, The database stores the users's data
		c, The users manage their tasks
	- Non-functional requirements:
		a, No user will have access to other's data except for their names
		b, Function buttons will response in short time

5. Functional plan:

- The user can add items to the to-do list and can delete them without any issue. For that, we have to use html,javascript, if the user is not registered. If the user is already registered we have to attach php, database to it to store the user's to do.
- User registration should be clean, evident, fast
- Every function have to be as efficent as possible for the appropriate user experience.
- Database should never have any anomaly
- The design of the app must be eye catching but modern and simple at the same time.

6. Physical environment:

 - The app is made for the web platform.
 - We don't have any purchased component.
 - Development tools:
	° Visual Studio Code
	° Notepad++
	° XAMPP 

----------------------------------------------------------------------------------------------------------------------------------------------------------
7. Architectural plan:

 The system needs a database, where the registered users will be stored. For that we
 will use MySQL. The register and login operations will be handled by the server. We use PHP
 to get information from the server and from the database. The database is only accessible by the server.

 We use Javascript to make complex features possible in our app. The web part is mainly HTML and
 CSS.

----------------------------------------------------------------------------------------------------------------------------------------------------------
8. Database plan:

9. Implementation plan:

 The web part mainly be made in HTML, CSS and Javascript. We write these files separately to
 make it easier to extend and modify. The backend part uses PHP files so we write them separately from
 the frontend.

----------------------------------------------------------------------------------------------------------------------------------------------------------
10. Test plan:
Our plan is to test each function of our web app by everybody in our team. For that we'll use a scheme that allows us to check if every function works fine. It looks like a spreadsheet.
The spreadsheet will look like that:
Function | Result | Comment | 
*****************************
For example:
Add user | User added | It worked good, but a little bit slow, we should work on that.
Delete user | User still exists | The function is not working.

11. Installation plan:

12. Maintenance plan:
