
###System plan###

1. Goal of the system:

The goal of the system is to help the people to remember their goals and tasks.
Nowadays there are many ways to help ourselves when it comes to task managing.
Most of these are hard-to-use, and that is the reason why we want our system to be simple yet useful.

----------------------------------------------------------------------------------------------------------------------------------------------------------
2. Project plan:

We are making web application using frontend and backend programming. The web applications design and structure
will be the task for the frontend developers. Backend developers will ensure that the website connects to the database
and the functions that uses database connection work.

Frontend developers:
	- HTML: Cserneczky Bálint, Erdélyi Roland, Horváth Krisztián, Horváth Péter
	- CSS: Cserneczky Bálint, Erdélyi Roland, Horváth Krisztián, Horváth Péter
	- JavaScript: Cserneczky Bálint

Backend developers:
	- PHP: Horváth Péter, Horváth Krisztián, Erdélyi Roland

----------------------------------------------------------------------------------------------------------------------------------------------------------
3. Business use case model:

A model of our desired business use case can be found at the following url:
https://github.com/unicsbalint/to-do/blob/master/pictures/business_use_case_model.png

----------------------------------------------------------------------------------------------------------------------------------------------------------
4. Requirements:

	- Functional requirements:
		a, The user can log in, log out and delete his account
		b, The database stores the users's data
		c, The users manage their tasks
	- Non-functional requirements:
		a, No user will have access to other's data except for their names
		b, Function buttons will response in short time

5. Functional plan:

- The user can add items to the to-do list and can delete them without any issue. For that, we have to use html,javascript, if the user is not registered. If the user is already registered we have to attach php, database to it to store the user's to do.
- User registration should be clean, evident, fast
- Every function have to be as efficent as possible for the appropriate user experience.
- Database should never have any anomaly
- The design of the app must be eye catching but modern and simple at the same time.

6. Physical environment:

 - The app is made for the web platform.
 - We don't have any purchased component.
 - Development tools:
	° Visual Studio Code
	° Notepad++
	° XAMPP 

----------------------------------------------------------------------------------------------------------------------------------------------------------
7. Architectural plan:

 The system needs a database, where the registered users will be stored. For that we
 will use MySQL. The register and login operations will be handled by the server. We use PHP
 to get information from the server and from the database. The database is only accessible by the server.

 We use Javascript to make complex features possible in our app. The web part is mainly HTML and
 CSS.

----------------------------------------------------------------------------------------------------------------------------------------------------------
8. Database plan:

An imamge of our project's entity-relationship diagram can be found at the following url:
https://github.com/unicsbalint/to-do/blob/master/pictures/Entity_relationship_diagram.png

In our project we will store the user's data in 3 database tables. One will store the registration information
of the user, the other two will contain the user's tasks and reports. The users table will contain the following
attributes: id, username, email address and password. The password attribute will be stored using sha1 encryption.
The tasks table will have the following attributes: id, uid, task, deadline. The reports table will contain these
attributes: id and report. We will access the database using PHP.

9. Implementation plan:

 The web part mainly be made in HTML, CSS and Javascript. We write these files separately to
 make it easier to extend and modify. The backend part uses PHP files so we write them separately from
 the frontend.

----------------------------------------------------------------------------------------------------------------------------------------------------------
10. Test plan:
Our plan is to test each function of our web app by everybody in our team. For that we'll use a scheme that allows us to check if every function works fine. It looks like a spreadsheet.
The spreadsheet will look like that:
Function | Result | Comment | 
*****************************
For example:
Add user | User added | It worked good, but a little bit slow, we should work on that.
Delete user | User still exists | The function is not working.

11. Installation plan:
The app requires to have a web server running because we use PHP, and database in it. For development we use XAMPP, but when the page will be installed it will run on an Apache2 server with MySql.
I suggest you to use Linux server for installation, because the Maintenance will be easier.
WARNING! After installation you might have to change some path in the index file.

12. Maintenance plan:
As it is a very simple app, Maintenance will be really easy, we won't use any special directories, plugins just pure html,css,php,javascript,mysql.
- In case of server issues: If anything happens to the server (eq: unexpected shutdown) the user information still be stored in the database. But the server should create backup files of the page every 12 hours.
- In case of update: Before update any component we should create a backup of the whole page.

